Parameters:
  
  DBInstanceSize:
    Description: "The instance size of the database eg. db.m5.large"
    Type: String
    Default: "db.t3.micro"
  
  DBInstanceStorageSize:
    Description: "Size in Gib for the database storage"
    MinValue: 20
    MaxValue: 65536
    Type: Number 
    Default: 20

  DBInstanceStorageType:
    Description: "Storage class of DB instance, can be standard, gp2 or io1"
    Type: String 
    Default: "gp2"

  DBInstanceId:
    Description: "A unique name for the RDS instance in the deployed region"
    Type: String 
    Default: "TestDBInstance"

  DBInstanceName: 
    Description: "The name of the postgres database"
    Type: String 
    Default: "TestDBInstance"

  DBInstanceUsername:
    Description: "The database username"
    Type: String 

  DBInstancePassword: 
    Description: "The database password"
    Type: String 
  
Resources:

  DbVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: stack
          Value: !Sub AWS::StackName
        - Key: Name 
          Value: "DB-VPC"

  DbPublicSubnet1:
    Type: AWS::EC2::Subnet 
    Properties:
      VpcId: !Ref DbVPC
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: !Sub "${AWS::Region}a" # e.g us-east-1a
      Tags:
        - Key: Name 
          Value: "Public Db 10.0.0.0/24"
        - Key: stack 
          Value: !Sub AWS::StackName 
  
  DbPublicSubnet2:
    Type: AWS::EC2::Subnet 
    Properties:
      VpcId: !Ref DbVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Sub "${AWS::Region}b" # e.g us-east-1b 
      Tags:
        - Key: Name 
          Value: "Public Db 10.0.2.0/24"
        - Key: stack 
          Value: !Sub AWS::StackName
  
  DbPrivateSubnet1:
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref DbVPC 
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Sub "${AWS::Region}a" # e.g us-east-1a
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: "Private Db 10.0.1.0/24"
        - Key: stack 
          Value: !Sub AWS::StackName
  
  DbPrivateSubnet2:
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref DbVPC 
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Sub "${AWS::Region}b" # e.g us-east-1b
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: "Private Db 10.0.3.0/24"
        - Key: stack 
          Value: !Sub AWS::StackName 
  
  DbIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: stack 
          Value: !Sub AWS::StackName
        - Key: Name 
          Value: Db-IGW
  
  DbGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment 
    Properties:
      InternetGatewayId: !Ref DbIGW 
      VpcId: !Ref DbVPC
  
  DbPublicRouteTable:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId: !Ref DbVPC
      Tags:
        - Key: Name 
          Value: DbPublicRouteTable 
        - Key: stack 
          Value: !Sub AWS::StackName
  
  DbPrivateRouteTable:
    Type: AWS::EC2::RouteTable 
    Properties: 
      VpcId: !Ref DbVPC
      Tags:
        - Key: Name 
          Value: DbPrivateRouteTable 
        - Key: stack 
          Value: !Sub AWS::StackName 
  
  DbPublicRoute:
    Type: AWS::EC2::Route 
    Properties:
      RouteTableId: !Ref DbPublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref DbIGW
  
  DbPublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties: 
      SubnetId: !Ref DbPublicSubnet1 
      RouteTableId: !Ref DbPublicRouteTable
  
  DbPublicSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties: 
      SubnetId: !Ref DbPublicSubnet2 
      RouteTableId: !Ref DbPublicRouteTable
  
  DbPrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties: 
      SubnetId: !Ref DbPrivateSubnet1
      RouteTableId: !Ref DbPrivateRouteTable
  
  DbPrivateSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties: 
      SubnetId: !Ref DbPrivateSubnet2 
      RouteTableId: !Ref DbPrivateRouteTable 
   
  DbPostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup 
    Properties: 
      GroupDescription: "Allow Inbound Postgres"
      GroupName: "Web DMZ Db"
      VpcId: !Ref DbVPC 
      SecurityGroupIngress:
        - IpProtocol: tcp 
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0 
   
  DbPublicSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup 
    Properties: 
      DBSubnetGroupDescription: "Db Public subnet group"
      DBSubnetGroupName: "Db public subnet group"
      SubnetIds: 
        - !Ref DbPublicSubnet1
        - !Ref DbPublicSubnet2 
      Tags:
        - Key: stack 
          Value: !Sub AWS::StackName

  DbPrivateSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup 
    Properties:
      DBSubnetGroupDescription: "Db Private subnet group"
      DBSubnetGroupName: "Db private subnet group"
      SubnetIds:
        - !Ref DbPrivateSubnet1 
        - !Ref DbPrivateSubnet2
      Tags: 
        - Key: stack 
          Value: !Sub AWS::StackName 

  DbSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup 
    Properties: 
      EC2VpcId: !Ref DbVPC
      GroupDescription: "postgres db ingress from external ip"
      DBSecurityGroupIngress: 
        - CIDRIP: "0.0.0.0/0"

  DbRdsInstance:
    Type: AWS::RDS::DBInstance 
    Properties:
      Engine: postgres 
      DBInstanceClass: !Ref DBInstanceSize
      MultiAZ: true
      StorageType: !Ref DBInstanceStorageType
      AllocatedStorage: !Ref DBInstanceStorageSize
      DBInstanceIdentifier: !Ref DBInstanceId
      DBName: !Ref DBInstanceName
      MasterUsername: !Ref DBInstanceUsername 
      MasterUserPassword: !Ref DBInstancePassword
      DBSubnetGroupName: !Ref DbPublicSubnetGroup
      PubliclyAccessible: true
      VPCSecurityGroups: 
        - !Ref DbPostgresSecurityGroup

Outputs: 
  DbURI: 
    Description: "The URI endpoint for the DB instance"
    Value: !GetAtt DbRdsInstance.Endpoint.Address
